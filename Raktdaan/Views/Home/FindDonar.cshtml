 
<h1 class="text-center mt-4 text-white"> Find Blood Donar Near You!</h1>
 
 
  <!-- Search Filters -->
  <div class="search-container">
    <input type="text" id="searchName" placeholder="Search by Name" />
    <input type="text" id="searchCity" placeholder="Search by City" />
    <input type="text" id="searchState" placeholder="Search by State" />
     <select id="searchBloodGroup">
      <option value="">All Blood Groups</option>
      <option value="A+">A+</option>
      <option value="A-">A-</option>
      <option value="B+">B+</option>
      <option value="B-">B-</option>
      <option value="O+">O+</option>
      <option value="O-">O-</option>
      <option value="AB+">AB+</option>
      <option value="AB-">AB-</option>
    </select>
    <button class="btn btn-danger" onclick="applySearch()">Search</button>
    <button class="btn btn-danger" onclick="resetSearch()">Reset</button>
  </div>
  
  <!-- Table Container -->
  <div class="table-container">
    <table id="donorTable">
      <thead>
        <tr>
         
          <th>
            Name 
            <button class="sort-btn" onclick="sortTable(1, 'asc')">▲</button>
            <button class="sort-btn" onclick="sortTable(1, 'desc')">▼</button>
          </th>
          <th>
            Blood Group 
            <button class="sort-btn" onclick="sortTable(2, 'asc')">▲</button>
            <button class="sort-btn" onclick="sortTable(2, 'desc')">▼</button>
          </th>
          <th>
            State 
            <button class="sort-btn" onclick="sortTable(3, 'asc')">▲</button>
            <button class="sort-btn" onclick="sortTable(3, 'desc')">▼</button>
          </th>
          <th>
            City 
            <button class="sort-btn" onclick="sortTable(4, 'asc')">▲</button>
            <button class="sort-btn" onclick="sortTable(4, 'desc')">▼</button>
          </th>
       
          <th>Action</th>
        </tr>
      </thead>
      <tbody id="tableBody">
        <!-- Rows will be populated here -->
      </tbody>
    </table>
  </div>
  
  <!-- Pagination -->
  <div class="pagination" id="pagination"></div>
  
  <script>
    // Global data variables
    let data = [];         // Full dataset from API
    let filteredData = []; // Data after applying search filters
    const rowsPerPage = 10;
    let currentPage = 1;
  
    // Fetch donor data from API endpoint
    function fetchDonorData() {
      fetch('/Home/GetAll')
        .then(response => response.json())
        .then(result => {
          data = result.data;
          filteredData = data.slice();
          renderTable(1);
        })
        .catch(error => console.error('Error fetching donor data:', error));
    }
  
    // Render table for the current page
    function renderTable(page) {
      const tableBody = document.getElementById('tableBody');
      tableBody.innerHTML = '';
      currentPage = page;
      const start = (page - 1) * rowsPerPage;
      const end = start + rowsPerPage;
      const paginatedItems = filteredData.slice(start, end);
  
      paginatedItems.forEach((item, index) => {
        const row = document.createElement('tr');
        row.innerHTML = `
          
          <td>${item.full_Name || item.Full_Name}</td>
          <td>${item.blood_group || item.Blood_group}</td>
          <td>${item.state || item.State}</td>
          <td>${item.city || item.City}</td>
         
          <td><a href="/Home/Donar_details?id=${item.id}" class="btn btn-danger">Get Details</a></td>
        `;
        tableBody.appendChild(row);
      });
  
      renderPagination();
    }
  
    // Sort table by a given column (columnIndex) in the specified order ('asc' or 'desc')
    function sortTable(columnIndex, order) {
      // Map column index to property name. Here, index 0 is sorted by id (or maintained order)
      let prop = '';
       if (columnIndex === 1) {
        prop = "full_Name";
      } else if (columnIndex === 2) {
        prop = "blood_group";
      } else if (columnIndex === 3) {
        prop = "state";
      } else if (columnIndex === 4) {
        prop = "city";
      }  
  
      filteredData.sort((a, b) => {
        let valA = a[prop] ? a[prop].toString().toLowerCase() : "";
        let valB = b[prop] ? b[prop].toString().toLowerCase() : "";
  
        // If both values are numbers, compare numerically
        if (!isNaN(valA) && !isNaN(valB)) {
          return order === 'asc' ? valA - valB : valB - valA;
        }
        // Otherwise, compare as strings
        return order === 'asc' ? valA.localeCompare(valB) : valB.localeCompare(valA);
      });
  
      renderTable(1);
    }
  
    // Render pagination buttons based on the number of items in filteredData
    function renderPagination() {
      const paginationDiv = document.getElementById('pagination');
      paginationDiv.innerHTML = '';
      const totalPages = Math.ceil(filteredData.length / rowsPerPage);
      for (let i = 1; i <= totalPages; i++) {
        const btn = document.createElement('button');
        btn.innerText = i;
        if (i === currentPage) btn.classList.add('active');
        btn.addEventListener('click', () => renderTable(i));
        paginationDiv.appendChild(btn);
      }
    }
  
    // Apply search filters based on input values
    function applySearch() {
      const nameInput = document.getElementById('searchName').value.toLowerCase();
      const cityInput = document.getElementById('searchCity').value.toLowerCase();
      const stateInput = document.getElementById('searchState').value.toLowerCase();
     
      const bloodGroupInput = document.getElementById('searchBloodGroup').value;
  
      filteredData = data.filter(item => {
        const matchName = nameInput === '' || ((item.full_Name || item.Full_Name) || '').toLowerCase().includes(nameInput);
        const matchCity = cityInput === '' || ((item.city || item.City) || '').toLowerCase().includes(cityInput);
        const matchState = stateInput === '' || ((item.state || item.State) || '').toLowerCase().includes(stateInput);
        
        const matchBloodGroup = bloodGroupInput === '' || (item.blood_group === bloodGroupInput) || (item.Blood_group === bloodGroupInput);
        return matchName && matchCity && matchState  && matchBloodGroup;
      });
  
      renderTable(1);
    }
  
    // Reset search filters and display the full dataset
    function resetSearch() {
      document.getElementById('searchName').value = '';
      document.getElementById('searchCity').value = '';
      document.getElementById('searchState').value = '';
     
      document.getElementById('searchBloodGroup').value = '';
      filteredData = data.slice();
      renderTable(1);
    }
  
    // Fetch donor data when the page loads
    document.addEventListener('DOMContentLoaded', fetchDonorData);
  </script>
 
 
